{"version":3,"sources":["../../../../server/api/typeEffet/typeEffet.controller.js"],"names":[],"mappings":"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","file":"typeEffet.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/typeEffets              ->  index\n * POST    /api/typeEffets              ->  create\n * GET     /api/typeEffets/:id          ->  show\n * PUT     /api/typeEffets/:id          ->  update\n * DELETE  /api/typeEffets/:id          ->  destroy\n */\n\n'use strict';\n\nimport _ from 'lodash';\nimport TypeEffet from './typeEffet.model';\nimport Effet from '../effet/effet.model';\nimport Cache from '../cache/cache.model';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if (entity) {\n      res.status(statusCode).json(entity);\n    }\n  };\n}\n\nfunction saveUpdates(updates) {\n  return function(entity) {\n    var updated = _.merge(entity, updates);\n    return updated.save()\n      .then(updated => {\n        return updated;\n      });\n  };\n}\n\n// Save in cache.\nfunction saveInCache(req) {\n  return function(entity) {\n    if (entity && (req.body.titre !== '')) {\n      console.log('Type effet chargé : OK');\n      return Effet.find().lean().exec()\n          .then(data => {\n          console.log('Base effets trouvée : OK');\n      return Cache.remove({})\n          .then(en => {\n          console.log('Cache supprimé: OK');\n      return Cache.create(data)\n          .then(en => {\n          console.log('Effets mis en cache: OK');\n      return Cache.update({type: entity.titre}, {type: req.body.titre}, {multi: true})\n          .then(en => {\n          console.log('Cache updaté: OK');\n      return Effet.remove({})\n          .then(en => {\n          console.log('Base Effets effacée: OK');\n      return Cache.find().lean().exec()\n          .then(fromCache => {\n          console.log('Chargement du nouveau cache: OK');\n      return Effet.create(fromCache)\n          .then(en => {\n          console.log('Base effet réinjectée depuis le cache: OK');\n      return TypeEffet.findById(req.params.id).exec()\n          .then(entity => {\n          console.log('Debut de changement type effet: OK');\n      return entity;\n    });\n    });\n    });\n    });\n    });\n    });\n    });\n    });\n    }\n    else{\n      console.log('Aucune entité trouvée ou nouveau type vide');\n      return null;\n    }\n  }\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if (entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if (!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    console.log('Handle error: ->' + err);\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of TypeEffets\nexport function index(req, res) {\n  return TypeEffet.find().exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single TypeEffet from the DB\nexport function show(req, res) {\n  return TypeEffet.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new TypeEffet in the DB\nexport function create(req, res) {\n  return TypeEffet.create(req.body)\n    .then(respondWithResult(res, 201))\n    .catch(handleError(res));\n}\n\n// Updates an existing TypeEffet in the DB\nexport function update(req, res) {\n  if (req.body._id) {\n    delete req.body._id;\n  }\n  TypeEffet.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(saveInCache(req))\n    .then(saveUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a TypeEffet from the DB\nexport function destroy(req, res) {\n  return TypeEffet.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"]}