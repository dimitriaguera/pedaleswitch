{"version":3,"sources":["../../../../server/api/typeEffet/typeEffet.integration.js"],"names":[],"mappings":"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","file":"typeEffet.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newTypeEffet;\n\ndescribe('TypeEffet API:', function() {\n\n  describe('GET /api/typeEffets', function() {\n    var typeEffets;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/typeEffets')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          typeEffets = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      typeEffets.should.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /api/typeEffets', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/typeEffets')\n        .send({\n          name: 'New TypeEffet',\n          info: 'This is the brand new typeEffet!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newTypeEffet = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created typeEffet', function() {\n      newTypeEffet.name.should.equal('New TypeEffet');\n      newTypeEffet.info.should.equal('This is the brand new typeEffet!!!');\n    });\n\n  });\n\n  describe('GET /api/typeEffets/:id', function() {\n    var typeEffet;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/typeEffets/' + newTypeEffet._id)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          typeEffet = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      typeEffet = {};\n    });\n\n    it('should respond with the requested typeEffet', function() {\n      typeEffet.name.should.equal('New TypeEffet');\n      typeEffet.info.should.equal('This is the brand new typeEffet!!!');\n    });\n\n  });\n\n  describe('PUT /api/typeEffets/:id', function() {\n    var updatedTypeEffet;\n\n    beforeEach(function(done) {\n      request(app)\n        .put('/api/typeEffets/' + newTypeEffet._id)\n        .send({\n          name: 'Updated TypeEffet',\n          info: 'This is the updated typeEffet!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          updatedTypeEffet = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedTypeEffet = {};\n    });\n\n    it('should respond with the updated typeEffet', function() {\n      updatedTypeEffet.name.should.equal('Updated TypeEffet');\n      updatedTypeEffet.info.should.equal('This is the updated typeEffet!!!');\n    });\n\n  });\n\n  describe('DELETE /api/typeEffets/:id', function() {\n\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete('/api/typeEffets/' + newTypeEffet._id)\n        .expect(204)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when typeEffet does not exist', function(done) {\n      request(app)\n        .delete('/api/typeEffets/' + newTypeEffet._id)\n        .expect(404)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n  });\n\n});\n"]}